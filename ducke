#!/usr/bin/env luajit

local string = require("string")
local graphics = require("graphics")
local levels = require("levels")
package.path = "rawterm/rawterm.lua"
local rawterm = require("rawterm")

-- global variables (these variables can be called from anywhere)
BlockChar = ":"
WaterChar = "~"
DeathChar = "*"
WinChar = "w"
WaterColor = "\027[1;036m"
BlockColor = "\027[1;032m"
DeathColor = "\027[1;031m"
WinColor = "\027[035;45m"
PlayerColor = "\027[1;033m"
ObjectiveColor = "\027[1;035m"
StartPosY = 29
StartPosX = 1
PlayerPosY = StartPosY
PlayerPosX = StartPosX
LastPlayerPosY = PlayerPosY
LastPlayerPosX = PlayerPosX
MapHeight = 30
MapWidth = 100
Death = 0
Winner = 0
Started = 0
Objectives = { "f", "s", "t", "endobj" }
Level = 1
Levels = levels.ListOfLevels
for level in pairs(Levels) do
  NumberOfLevels = level
end

-- enable raw mode for getting input from keyboard
rawterm.enableRawMode({
  carriageOut = "\n",
  readtimeout = 2
})

function Wait(msec)
  local t = os.clock()
  repeat
  until os.clock() > t + msec * 1e-3
end

function Clear()
  -- clear terminal
  os.execute("clear")
  -- print out the border (100x30)
  for row = 1,MapHeight,1 do
    io.write("\027[" .. row .. ";" .. (MapWidth+1) .. "H")
    io.write("|")
  end
  io.write("\n")
  for _ = 1,(MapWidth+1),1 do
    io.write("-")
  end
  -- send cursor home
  io.write("\027[H")
end

function PrintMessage(message)
  Clear()

  -- put the cursor in the middle and print the message
  for row, data in ipairs(message) do
    local messageRow = data:gsub("#", "\027[034m#\027[0m")
    io.write("\027[" .. row+10 .. ";22H")
    io.write(messageRow)
  end

  io.write("\027[" .. MapHeight .. ";" .. (MapWidth+1) .. "H\n")
end

function PrintBanner()
  -- print out the title
  for row, data in ipairs(graphics.Title) do
    io.write("\027[" .. row .. ";5H")
    io.write(data)
  end

  -- print out the banner
  io.write("\027[033m")
  for row, data in ipairs(graphics.Banner) do
    io.write("\027[" .. row .. ";37H")
    io.write(data)
  end
  io.write("\027[0m")
end

function PrintMap()
  -- send cursor home
  io.write("\027[H")
  -- print out the whole map
  for _, data in ipairs(Map) do
    -- print different colors
    -- blocks...
    local mapRow = data:gsub(BlockChar, BlockColor..BlockChar.."\027[0m")
    -- ...water...
    mapRow = mapRow:gsub(WaterChar, WaterColor..WaterChar.."\027[0m")
    -- ...death...
    mapRow = mapRow:gsub(DeathChar, DeathColor..DeathChar.."\027[0m")
    -- ...win
    mapRow = mapRow:gsub(WinChar, WinColor..WinChar.."\027[0m")
    -- change objectives to their numbers
    for i in pairs(Objectives) do
      mapRow = mapRow:gsub(Objectives[i], ObjectiveColor..i.."\027[0m")
    end

    io.write(mapRow, "\n")
  end
end

function ParseMenu(menuItem)
  local character

  if menuItem == "New Game" then
    if Started == 1 and Death == 0 then
      PrintMessage(graphics.NewGameMsg)
      while true do
        character = io.read(1) or "\0"
        if character == "y" or character == "n" then
          break
        end
      end
      if character == "y" then
        PlayerPosX = StartPosX
        PlayerPosY = StartPosY
        Started = 1
        Level = 1
        Map = Levels[Level]
        GameLoop()
      else
        Clear()
        PrintBanner()
        return
      end
    else
      PlayerPosX = StartPosX
      PlayerPosY = StartPosY
      Started = 1
      Level = 1
      Map = Levels[Level]
      GameLoop()
    end

  elseif menuItem == "Resume Game" then
    if Death == 1 then
      io.write("You died, start a new game!\n")
    elseif Winner == 1 then
      io.write("You won! What else do you want?\n")
    elseif Started == 0 then
      io.write("Start the game first!\n")
    else
      GameLoop()
    end

  elseif menuItem == "Quit Game" then
    PrintMessage(graphics.QuitMsg)
    while true do
      character = io.read(1) or "\0"
      if character == "y" or character == "n" then
        break
      end
    end
    if character == "y" then
      return "quit"
    else
      Clear()
      PrintBanner()
    end
  end
end

function EndGame(reason)
  local msg
  -- disable raw mode while waiting
  rawterm.disableRawMode()
  Clear()

  if reason == "gameover" then
    Death = 1
    msg = graphics.GameOverMsg
  elseif reason == "gamewon" then
    Winner = 1
    Started = 0
    msg = graphics.WonGameMsg
  end
  -- print the message
  PrintMessage(msg)
  -- wait a few seconds
  Wait(2000)

  Clear()
  PrintBanner()
  -- enable raw mode again
  rawterm.enableRawMode({
    carriageOut = "\n",
    readtimeout = 2
  })
end

function Gravity(character)
  -- gravity doesn't work in the water
  if character == "\0"
    and PlayerPosY <= (MapHeight - 2)
    and string.find(string.sub(Map[PlayerPosY+2],(PlayerPosX),(PlayerPosX+5)), BlockChar) == nil
    and string.find(string.sub(Map[PlayerPosY],(PlayerPosX),(PlayerPosX+5)), WaterChar) == nil
    and string.find(string.sub(Map[PlayerPosY+1],(PlayerPosX),(PlayerPosX+5)), WaterChar) == nil
    then
    PlayerPosY = PlayerPosY + 1
  end
end

function DrawPlayer(position_y, position_x, direction)
  -- reprint the map after the player
  local playerRow1 = string.sub(Map[LastPlayerPosY],LastPlayerPosX,(LastPlayerPosX+5))
  local playerRow2 = string.sub(Map[(LastPlayerPosY+1)],LastPlayerPosX,(LastPlayerPosX+5))
  -- water character stays the same color
  playerRow1 = playerRow1:gsub(WaterChar, WaterColor..WaterChar.."\027[0m")
  playerRow2 = playerRow2:gsub(WaterChar, WaterColor..WaterChar.."\027[0m")
  -- win char stays the same if picked up before completing objectives
  playerRow1 = playerRow1:gsub(WinChar, WinColor..WinChar.."\027[0m")
  playerRow2 = playerRow2:gsub(WinChar, WinColor..WinChar.."\027[0m")
  -- hide object characters on touch
  for i in pairs(Objectives) do
    if i <= CurrentObjective then
      playerRow1 = playerRow1:gsub(Objectives[i], " ")
      playerRow2 = playerRow2:gsub(Objectives[i], " ")
    else
      playerRow1 = playerRow1:gsub(Objectives[i], ObjectiveColor..i.."\027[0m")
      playerRow2 = playerRow2:gsub(Objectives[i], ObjectiveColor..i.."\027[0m")
    end
  end

  -- print map
  io.write("\027[" .. LastPlayerPosY .. ";" .. LastPlayerPosX .. "H")
  io.write(playerRow1, "\n")
  io.write("\027[" .. (LastPlayerPosY+1) .. ";" .. LastPlayerPosX .. "H")
  io.write(playerRow2, "\n")

  -- remember position for map reprint
  LastPlayerPosY = position_y
  LastPlayerPosX = position_x

  -- print out the player depending on the direction
  if direction == 0 then
    io.write("\027[" .. position_y .. ";" .. position_x .. "H")
    io.write(PlayerColor..">(.)")
    io.write("\027[" .. (position_y+1) .. ";" .. (position_x+1) .. "H")
    io.write("(___/\027[0m")
  else
    io.write("\027[" .. position_y .. ";" .. (position_x+2) .. "H")
    io.write(PlayerColor.."(.)<")
    io.write("\027[" .. (position_y+1) .. ";" .. position_x .. "H")
    io.write("\\___)\027[0m")
  end
end

function MovePlayer(character,direction)
  if character == "h" and  PlayerPosX >= 2 then
    direction = 0
    if string.sub(Map[PlayerPosY],(PlayerPosX-1),(PlayerPosX-1)) ~= BlockChar
    and string.sub(Map[PlayerPosY+1],(PlayerPosX-1),(PlayerPosX-1)) ~= BlockChar
    then
      PlayerPosX = PlayerPosX - 1
    end

  elseif character == "j"
    and PlayerPosY <= (MapHeight - 2)
    and string.find(string.sub(Map[PlayerPosY+2],(PlayerPosX),(PlayerPosX+5)), BlockChar) == nil
    then
    PlayerPosY = PlayerPosY + 1

  elseif character == "k"
    and PlayerPosY >= 2
    and string.find(string.sub(Map[PlayerPosY-1],(PlayerPosX),(PlayerPosX+5)), BlockChar) == nil
    then
    PlayerPosY = PlayerPosY - 1

  elseif character == "l" and PlayerPosX <= (MapWidth - 6) then
    direction = 1
    if string.sub(Map[PlayerPosY],(PlayerPosX+6),(PlayerPosX+6)) ~= BlockChar
    and string.sub(Map[PlayerPosY+1],(PlayerPosX+6),(PlayerPosX+6)) ~= BlockChar
    then
      PlayerPosX = PlayerPosX + 1
    end
  end

  return direction
end

function IsPlayerDead()
  if string.find(string.sub(Map[PlayerPosY],(PlayerPosX),(PlayerPosX+5)), DeathChar) ~= nil
  or string.find(string.sub(Map[PlayerPosY+1],(PlayerPosX),(PlayerPosX+5)), DeathChar) ~= nil
  then
    EndGame("gameover")
    return 1
  else
    return 0
  end
end

function HasPlayerWon()
  local character

  if string.find(string.sub(Map[PlayerPosY],(PlayerPosX),(PlayerPosX+5)), WinChar) ~= nil
  or string.find(string.sub(Map[PlayerPosY+1],(PlayerPosX),(PlayerPosX+5)), WinChar) ~= nil
  then
    Level = Level + 1
    if Level == NumberOfLevels+1 then
      -- last level completed
      EndGame("gamewon")
      return 1
    else
      -- change the map and reset the position
      Map = Levels[Level]
      NumOfObjectives = CountObjectives(Map, Objectives)
      CurrentObjective = 0
      PlayerPosX = StartPosX
      PlayerPosY = StartPosY
      -- issue a prompt for the next level
      PrintMessage(graphics.NextLevelMsg)
      while true do
        character = io.read(1) or "\0"
        if character == "y" or character == "n" then
          break
        end
      end
      if character == "y" then
        -- proceed
        Clear()
        PrintMap()
        return 0
      else
        -- return to menu
        Clear()
        PrintBanner()
        return 1
      end
    end
  end
end

function CheckObjectives(objectiveList, objectiveNum, allObjectives)
  if string.find(string.sub(Map[PlayerPosY],(PlayerPosX),(PlayerPosX+5)), objectiveList[objectiveNum+1]) ~= nil
  or string.find(string.sub(Map[PlayerPosY+1],(PlayerPosX),(PlayerPosX+5)), objectiveList[objectiveNum+1]) ~= nil
  then
    -- increment objectives
    if objectiveNum < allObjectives then
      objectiveNum = objectiveNum + 1
    end
  end
  return objectiveNum
end

function CountObjectives(map, objectiveList)
  local count = 0
  for _, line in pairs(map) do
    for i in pairs(objectiveList) do
      if string.find(line, objectiveList[i]) ~= nil then
        count = count + 1
      end
    end
  end
  return count
end

function GameLoop()
  -- clear terminal
  Clear()

  --direction of the player (1-right, 0-left)
  local playerDir = 1
  local char

  -- none out of n objectives is completed
  CurrentObjective = 0
  NumOfObjectives = CountObjectives(Map, Objectives)

  -- player is alive and didn't win yet
  Death = 0
  Winner = 0

  -- print out the whole map
  PrintMap()

  -- infinite loop
  while true do
    -- draw the player
    DrawPlayer(PlayerPosY,PlayerPosX,playerDir)
    -- put the cursor at the map's end
    io.write("\027[" .. MapHeight .. ";" .. (MapWidth+1) .. "H")

    -- wait for input
    char = io.read(1) or "\0"

    -- back to menu
    if char == "p" then
      Clear()
      PrintBanner()
      return
    end
    -- apply gravity
    Gravity(char)
    -- move the player, detect walls and change direction
    playerDir = MovePlayer(char,playerDir)
    -- kill player and return to menu
    if IsPlayerDead() == 1 then
      return
    end
    -- check for completed objectives
    CurrentObjective = CheckObjectives(Objectives, CurrentObjective, NumOfObjectives)
    if CurrentObjective == NumOfObjectives then
      -- check to see if player has ended the level or finished the game
      if HasPlayerWon() == 1 then
        return
      end
    end

    -- print objective info (has to be seperate condition, otherwise it breaks on next level)
    if CurrentObjective == NumOfObjectives then
      if NumOfObjectives ~= 0 then
        io.write("\027[" .. (MapHeight+2) .. ";" .. 0 .. "H")
        io.write(ObjectiveColor .. "All objectives completed\027[0m")
        io.write("\027[" .. MapHeight .. ";" .. (MapWidth+1) .. "H")
      end
    else
      io.write("\027[" .. (MapHeight+2) .. ";" .. 0 .. "H")
      io.write("Current objective:" .. ObjectiveColor .. (CurrentObjective+1) .. "\027[0m/" .. NumOfObjectives)
      io.write("\027[" .. MapHeight .. ";" .. (MapWidth+1) .. "H")
    end

  end
end

function MainMenu()
  local menu = {
    " ",
    "New Game",
    "Resume Game",
    "Quit Game",
    " ",
  }
  local menuIndex = 2
  local char
  local action

  -- clear terminal
  Clear()
  -- print out the banner
  PrintBanner()

  -- enter initial loop aka main menu
  while true do
    -- show menu at 12th line
    io.write("\027[12;0H")
    io.write("h,j,k,l to move, p for pause\n")
    io.write("-------------------------\n",
            "   ", menu[menuIndex - 1] .. "          \n",
            "-->", menu[menuIndex] .. "          \n",
            "   ", menu[menuIndex + 1] .. "          \n",
            "-------------------------\n")

    -- wait for input
    char = io.read(1) or "\0"

    -- test characters
    if char == "j" and menuIndex < 4 then
      menuIndex = menuIndex + 1
    elseif char == "k" and menuIndex > 2 then
      menuIndex = menuIndex - 1
    elseif char == "l" then
      action = ParseMenu(menu[menuIndex])
      if action == "quit" then
        return
      end
    end
  end
end

-- Entry point
MainMenu()

-- disable raw mode and clear the terminal
os.execute("clear")
rawterm.disableRawMode()
